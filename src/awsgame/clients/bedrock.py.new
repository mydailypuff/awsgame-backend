"""Bedrock agent client implementation."""
import json
import logging
from typing import Dict, Any, Optional

import aioboto3
from botocore.exceptions import ClientError, BotoCoreError
from botocore.config import Config

from ..exceptions.custom_exceptions import AgentValidationError, AgentCommunicationError

logger = logging.getLogger(__name__)

class BedrockAgentClient:
    def __init__(self):
        # Initialize session
        self.session = aioboto3.Session()
        self.agent_id = 'VUWT3SI6VD'  
        self.agent_alias_id = 'DRFXHYTSMM'
        
    def validate_input(self, user_input: str) -> None:
        """Validate user input."""
        if not user_input or not isinstance(user_input, str):
            raise AgentValidationError("Input must be a non-empty string")
            
    def validate_response(self, completion: str) -> str:
        """Validate and clean response."""
        if not completion:
            raise AgentValidationError("Empty response from agent")
        return completion.strip()
        
    async def communicate(self, user_input: str, session_id: Optional[str] = None) -> Dict[str, Any]:
        """Communicate with the agent.
        
        Args:
            user_input: Input string
            session_id: Optional session ID
            
        Returns:
            Response dictionary
            
        Raises:
            AgentValidationError: For validation errors
            AgentCommunicationError: For communication errors
        """
        logger.info(f"Starting communication with Bedrock agent. Session ID: {session_id or 'default-session'}")
        try:
            self.validate_input(user_input)
            
            logger.info("Invoking Bedrock agent")
            async with self.session.client('bedrock-agent-runtime') as client:
                # Make request to get streaming response
                response = await client.invoke_agent(
                    agentId=self.agent_id,
                    agentAliasId=self.agent_alias_id,
                    sessionId=session_id or 'default-session',
                    inputText=user_input
                )
                
                # Process the streaming response
                completion = ""
                
                if not isinstance(response, dict):
                    raise AgentCommunicationError("Invalid response format - not a dictionary")
                    
                stream = response.get('body')
                if not stream:
                    raise AgentCommunicationError("No streaming body in response")
                
                try:
                    async for event in stream:
                        if not isinstance(event, dict):
                            continue
                            
                        chunk = event.get('chunk', {})
                        if not isinstance(chunk, dict):
                            continue
                            
                        chunk_bytes = chunk.get('bytes')
                        if not isinstance(chunk_bytes, bytes):
                            continue
                            
                        try:
                            chunk_text = chunk_bytes.decode('utf-8')
                            data = json.loads(chunk_text)
                            
                            if isinstance(data, dict):
                                if 'completion' in data:
                                    completion += data['completion']
                                elif 'content' in data:
                                    completion += data['content']
                                elif 'text' in data:
                                    completion += data['text']
                        except (json.JSONDecodeError, UnicodeDecodeError) as e:
                            logger.warning(f"Error decoding chunk: {str(e)}")
                            continue
                except Exception as e:
                    logger.error(f"Error processing stream: {str(e)}")
                    raise AgentCommunicationError(f"Error processing response stream: {str(e)}")
                    
                # Validate and return response
                completion = self.validate_response(completion)
                return {"response": completion}
                
        except (BotoCoreError, ClientError) as e:
            logger.error(f"AWS error occurred: {str(e)}")
            raise AgentCommunicationError(f"Error communicating with agent: {str(e)}")
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            raise AgentCommunicationError(f"Error communicating with agent: {str(e)}")